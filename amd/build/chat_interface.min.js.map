{"version":3,"file":"chat_interface.min.js","names":["Ajax","_interopRequireWildcard","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","_typeof","has","get","set","_t5","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","_regenerator","Symbol","iterator","toStringTag","c","prototype","Generator","u","create","_regeneratorDefine2","p","y","G","v","a","d","bind","length","l","TypeError","done","value","return","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","displayName","w","m","_regeneratorDefine","_invoke","enumerable","configurable","writable","_createForOfIteratorHelper","Array","isArray","_unsupportedIterableToArray","_n","F","s","next","_arrayLikeToArray","toString","slice","constructor","name","from","test","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","init","_exports","initializeChat","console","log","sendButton","document","getElementById","chatInput","messagesContainer","providerSelect","newConversationBtn","conversationsToggle","conversationsPanel","contentArea","motto","resultsArea","documentsSection","documentsList","error","aiConfig","currentProvider","currentConversationThreadId","loadAIConfiguration","loadExistingConversations","showDocuments","documentPaths","listHTML","concat","map","path","join","innerHTML","showResultsArea","style","display","hideResultsArea","methodname","args","action","result","success","conversations","populateConversationsList","message","fail","conversationList","forEach","conversation","conversationItem","createConversationElement","conversation_id","title","appendChild","setupConversationItemListener","conversationId","createElement","className","setAttribute","titleSpan","textContent","deleteBtn","type","addEventListener","stopPropagation","deleteConversation","conversationTitle","querySelector","confirm","wasActive","classList","contains","remove","remainingConversations","querySelectorAll","click","alert","config","setupProviderUI","fireworks_available","showConfigurationError","stack","errorDiv","hasAvailableProvider","fireworksOption","disabled","savedProvider","localStorage","getItem","sendMessage","trim","createNewConversation","sendMessageWithConversation","catch","userMessageDiv","saveMessageToDatabase","loadingDiv","provider","credentials","removeChild","sendFireworksChatMessage","scrollTop","scrollHeight","_x","_x2","_sendFireworksChatMessage","_callee2","_context2","setTimeout","_callee","aiMessageDiv","responseSpan","url","options","response","aiResponse","retrievedDocuments","documentsProcessed","lastAIMessageContent","reader","decoder","_yield$reader$read","lines","_iterator","_step","line","data","document_sources","_iterator2","_step2","msg","currentAIContent","html_content","htmlContent","_t","_t2","_t3","_context","method","headers","body","JSON","stringify","fetch","status","statusText","ok","Error","getReader","TextDecoder","read","decode","stream","split","parse","content","documents","doc","_doc$metadata","metadata","source","__class__","marked","err","responseLength","responsePreview","substring","generateUUID","crypto","randomUUID","replace","Math","random","_createNewConversation","_callee3","newConversationItem","allItems","_t4","_context3","Date","toLocaleTimeString","item","add","createConversationInMoodle","messageType","undefined","message_type","message_id","loadMessagesFromDatabase","reject","messages","_x3","_x4","_createConversationInMoodle","_callee4","_context4","displayMessages","messageDiv","target","getAttribute","id","setupConversationPanel","toggle","conversationItems","key","shiftKey","preventDefault","readyState"],"sources":["../src/chat_interface.js"],"sourcesContent":["// Standard license block omitted for brevity\n/**\n * @module     block_aiassistant/chat_interface\n * @copyright  2025 Your Name\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as Ajax from 'core/ajax';\n\n/**\n * Initialize the AI chat interface\n */\nexport const init = () => {\n    // Function to initialize the chat interface\n    const initializeChat = () => {\n        console.log('AI Chat: Initializing...');\n\n        const sendButton = document.getElementById(\"ai-chat-send\");\n        const chatInput = document.getElementById(\"ai-chat-input\");\n        const messagesContainer = document.getElementById(\"ai-chat-messages\");\n        const providerSelect = document.getElementById(\"ai-provider-select\");\n        const newConversationBtn = document.getElementById(\"ai-new-conversation-btn\");\n        const conversationsToggle = document.getElementById(\"ai-conversations-toggle\");\n        const conversationsPanel = document.getElementById(\"ai-conversations-panel\");\n        const contentArea = document.getElementById(\"ai-content-area\");\n        const motto = document.getElementById(\"ai-motto\");\n        const resultsArea = document.getElementById(\"ai-results-area\");\n        const documentsSection = document.getElementById(\"ai-documents-section\");\n        const documentsList = document.getElementById(\"ai-documents-list\");\n\n        if (!sendButton || !chatInput || !messagesContainer || !providerSelect || !newConversationBtn) {\n            console.error('AI Chat: Required elements not found');\n            return;\n        }\n\n        // Global configuration storage\n        let aiConfig = null;\n        let currentProvider = 'fireworks';\n        let currentConversationThreadId = null;\n\n        // Load AI configuration on startup\n        loadAIConfiguration();\n        loadExistingConversations();\n\n        /**\n         * Displays a list of document paths in the documents section.\n         * Populates the documents section with the provided document paths.\n         * If no documents are provided, displays a \"No documents retrieved\" message.\n         * \n         * @param {string[]} documentPaths - Array of document file paths to display\n         */\n        function showDocuments(documentPaths) {\n            if (documentPaths && documentPaths.length > 0) {\n                const listHTML = `\n                    <ul>\n                        ${documentPaths.map(path => `<li>${path}</li>`).join('')}\n                    </ul>\n                `;\n                documentsList.innerHTML = listHTML;\n            } else {\n                documentsList.innerHTML = '<p>No documents retrieved yet.</p>';\n            }\n        }\n        \n        /**\n         * Show the results area and hide the motto\n         */\n        function showResultsArea() {\n            if (motto) {\n                motto.style.display = 'none';\n            }\n            if (resultsArea) {\n                resultsArea.style.display = 'flex';\n            }\n        }\n        \n        /**\n         * Hide the results area and show the motto\n         */\n        function hideResultsArea() {\n            if (motto) {\n                motto.style.display = 'block';\n            }\n            if (resultsArea) {\n                resultsArea.style.display = 'none';\n            }\n        }\n\n        /**\n         * Load existing conversations from Moodle database\n         */\n        function loadExistingConversations() {\n            Ajax.call([{\n                methodname: 'block_aiassistant_manage_conversations',\n                args: {\n                    action: 'list'\n                },\n                done: function (result) {\n                    if (result && result.success && result.conversations) {\n                        console.log('Existing conversations loaded:', result.conversations);\n                        populateConversationsList(result.conversations);\n                    } else {\n                        console.log('No existing conversations found or failed to load:', result ? result.message : 'No response received');\n                    }\n                },\n                fail: function (error) {\n                    console.error('Failed to load existing conversations:', error);\n                }\n            }]);\n        }\n\n        /**\n         * Populate the conversations list with existing conversations\n         */\n        function populateConversationsList(conversations) {\n            const conversationList = document.getElementById('ai-conversation-list');\n\n            // Clear existing items\n            conversationList.innerHTML = '';\n\n            // Add each conversation to the list\n            conversations.forEach(conversation => {\n                const conversationItem = createConversationElement(conversation.conversation_id, conversation.title);\n                conversationList.appendChild(conversationItem);\n\n                // Add click listener to the item\n                setupConversationItemListener(conversationItem);\n            });\n\n            console.log(`Populated ${conversations.length} conversations in the list`);\n        }\n\n        /**\n         * Create a conversation element with title and delete button\n         */\n        function createConversationElement(conversationId, title) {\n            const conversationItem = document.createElement('div');\n            conversationItem.className = 'ai-conversation-item';\n            conversationItem.setAttribute('data-conversation-id', conversationId);\n\n            const titleSpan = document.createElement('span');\n            titleSpan.className = 'ai-conversation-title';\n            titleSpan.textContent = title;\n\n            const deleteBtn = document.createElement('button');\n            deleteBtn.className = 'ai-conversation-delete-btn';\n            deleteBtn.textContent = 'Ã—';\n            deleteBtn.title = 'Delete conversation';\n            deleteBtn.type = 'button';\n\n            // Add click handler for delete button\n            deleteBtn.addEventListener('click', function(e) {\n                e.stopPropagation(); // Prevent conversation selection\n                deleteConversation(conversationId, conversationItem);\n            });\n\n            conversationItem.appendChild(titleSpan);\n            conversationItem.appendChild(deleteBtn);\n\n            return conversationItem;\n        }\n\n        /**\n         * Delete a conversation with confirmation\n         */\n        function deleteConversation(conversationId, conversationItem) {\n            const conversationTitle = conversationItem.querySelector('.ai-conversation-title').textContent;\n            \n            // Show confirmation dialog\n            if (!confirm(`Are you sure you want to delete \"${conversationTitle}\"? This will permanently delete the conversation and all its messages.`)) {\n                return;\n            }\n\n            // Call backend to delete conversation\n            Ajax.call([{\n                methodname: 'block_aiassistant_manage_conversations',\n                args: {\n                    action: 'delete',\n                    conversation_id: conversationId\n                },\n                done: function(result) {\n                    if (result.success) {\n                        console.log('Conversation deleted successfully:', conversationId);\n                        \n                        // Check if deleted conversation was the active one\n                        const wasActive = conversationItem.classList.contains('active');\n                        \n                        // Remove conversation from UI\n                        conversationItem.remove();\n                        \n                        // If this was the active conversation, create or select another one\n                        if (wasActive) {\n                            currentConversationThreadId = null;\n                            \n                            // Check if there are other conversations\n                            const remainingConversations = document.querySelectorAll('.ai-conversation-item');\n                            if (remainingConversations.length > 0) {\n                                // Select the first remaining conversation\n                                remainingConversations[0].click();\n                            } else {\n                                // No conversations left, clear the chat\n                                messagesContainer.innerHTML = '<div class=\"ai-message\"><strong>AI Assistant:</strong> Hello! How can I help you today?</div>';\n                            }\n                        }\n                    } else {\n                        console.error('Failed to delete conversation:', result.message);\n                        alert('Failed to delete conversation: ' + result.message);\n                    }\n                },\n                fail: function(error) {\n                    console.error('Failed to delete conversation:', error);\n                    alert('Failed to delete conversation. Please try again.');\n                }\n            }]);\n        }\n\n        /**\n         * Load AI configuration from backend\n         */\n        function loadAIConfiguration() {\n            Ajax.call([{\n                methodname: 'block_aiassistant_get_ai_config',\n                args: {},\n                done: function (config) {\n                    if (config && config.success) {\n                        aiConfig = config;\n                        console.log('AI Config loaded successfully.');\n                        setupProviderUI();\n                    } else {\n                        console.error('Failed to load AI configuration:', config ? config.message : 'No response received');\n                        aiConfig = {\n                            success: false,\n                            fireworks_available: false,\n                        };\n                        showConfigurationError('Failed to load AI configuration. Please check plugin settings.');\n                    }\n                },\n                fail: function (error) {\n                    console.error('Error details:', {\n                        name: error.name,\n                        message: error.message,\n                        stack: error.stack\n                    });\n                    aiConfig = {\n                        success: false,\n                        fireworks_available: false,\n                    };\n                    showConfigurationError('Could not connect to AI configuration service.');\n                }\n            }]);\n        }\n\n        /**\n         * Show configuration error in chat\n         */\n        function showConfigurationError(message) {\n            const errorDiv = document.createElement(\"div\");\n            errorDiv.className = \"ai-message\";\n            errorDiv.innerHTML = `<strong>AI Assistant:</strong> <em>Error: ${message}</em>`;\n            messagesContainer.appendChild(errorDiv);\n        }\n\n        /**\n         * Setup provider UI based on configuration\n         */\n        function setupProviderUI() {\n            // Ensure aiConfig exists before proceeding\n            if (!aiConfig) {\n                console.error('AI configuration not loaded, cannot setup provider UI');\n                return;\n            }\n            // Clear existing options\n            providerSelect.innerHTML = '';\n\n            let hasAvailableProvider = false;\n\n            // Add available providers\n            if (aiConfig && aiConfig.fireworks_available) {\n                const fireworksOption = document.createElement('option');\n                fireworksOption.value = 'fireworks';\n                fireworksOption.textContent = 'Fireworks.ai';\n                providerSelect.appendChild(fireworksOption);\n                hasAvailableProvider = true;\n            }\n\n            // If no providers are available, add disabled options\n            if (!hasAvailableProvider) {\n                if (!aiConfig || !aiConfig.fireworks_available) {\n                    const fireworksOption = document.createElement('option');\n                    fireworksOption.value = 'fireworks';\n                    fireworksOption.textContent = 'Fireworks.ai (Not configured)';\n                    fireworksOption.disabled = true;\n                    providerSelect.appendChild(fireworksOption);\n                }\n\n                showConfigurationError('No AI providers are configured. Please check plugin settings.');\n                return;\n            }\n\n            // Restore saved selections\n            const savedProvider = localStorage.getItem('ai-chat-provider');\n\n            if (savedProvider && document.querySelector(`option[value=\"${savedProvider}\"]`)) {\n                providerSelect.value = savedProvider;\n                currentProvider = savedProvider;\n            } else if (aiConfig && aiConfig.fireworks_available) {\n                currentProvider = 'fireworks';\n                providerSelect.value = 'fireworks';\n            }\n        }\n\n        /**\n         * Send a message to the AI assistant\n         */\n        function sendMessage() {\n            const message = chatInput.value.trim();\n            if (!message) {\n                return;\n            }\n\n            // Check if we have a valid configuration\n            if (!aiConfig || !aiConfig.fireworks_available) {\n                showConfigurationError('No AI providers are configured. Please check plugin settings.');\n                return;\n            }\n\n            // If no conversation is selected, create a new one\n            if (!currentConversationThreadId) {\n                createNewConversation().then(() => {\n                    // After creating conversation, send the message\n                    sendMessageWithConversation(message, currentConversationThreadId);\n                }).catch(error => {\n                    console.error('Failed to create new conversation:', error);\n                    showConfigurationError('Failed to create new conversation. Please try again.');\n                });\n                return;\n            }\n\n            sendMessageWithConversation(message, currentConversationThreadId);\n        }\n\n        /**\n         * Send message with existing conversation\n         */\n        function sendMessageWithConversation(message, currentConversationThreadId) {\n            console.log('sendMessageWithConversation called with:', {\n                message: message,\n                conversationId: currentConversationThreadId\n            });\n            \n            // Show results area and hide motto\n            showResultsArea();\n            \n            // Add user message\n            const userMessageDiv = document.createElement(\"div\");\n            userMessageDiv.className = \"user-message\";\n            userMessageDiv.innerHTML = \"<strong>You:</strong> \" + message;\n            messagesContainer.appendChild(userMessageDiv);\n\n            // Save user message to database\n            saveMessageToDatabase(currentConversationThreadId, 'user', message);\n\n            // Clear input\n            chatInput.value = \"\";\n\n            // Show loading state\n            const loadingDiv = document.createElement(\"div\");\n            loadingDiv.className = \"ai-message\";\n            loadingDiv.innerHTML = `<strong>AI Assistant:</strong> <em>Getting your credentials for ${currentProvider}...</em>`;\n            messagesContainer.appendChild(loadingDiv);\n\n            // Get user credentials via AJAX\n            Ajax.call([{\n                methodname: 'block_aiassistant_get_user_credentials',\n                args: { provider: currentProvider },\n                done: function (credentials) {\n                    // Remove loading message\n                    messagesContainer.removeChild(loadingDiv);\n\n                    if (credentials.success) {\n                        sendFireworksChatMessage(message, currentConversationThreadId);\n                    } else {\n                        const errorDiv = document.createElement(\"div\");\n                        errorDiv.className = \"ai-message\";\n                        errorDiv.innerHTML = \"<strong>AI Assistant:</strong> <em>Error: \" + credentials.message + \"</em>\";\n                        messagesContainer.appendChild(errorDiv);\n                    }\n                },\n                fail: function (error) {\n                    // Remove loading message\n                    if (messagesContainer.contains(loadingDiv)) {\n                        messagesContainer.removeChild(loadingDiv);\n                    }\n\n                    const errorDiv = document.createElement(\"div\");\n                    errorDiv.className = \"ai-message\";\n                    errorDiv.innerHTML = \"<strong>AI Assistant:</strong> <em>Failed to get credentials: \" +\n                        (error.message || 'Unknown error') + \"</em>\";\n                    messagesContainer.appendChild(errorDiv);\n                }\n            }]);\n\n            // Scroll to bottom\n            messagesContainer.scrollTop = messagesContainer.scrollHeight;\n        }\n\n        /**\n         * Send chat message to Fireworks API (Direct API approach)\n         * @param {string} message - The message to send\n         */\n        async function sendFireworksChatMessage(message, currentConversationThreadId) {\n            setTimeout(async function () {\n                const aiMessageDiv = document.createElement(\"div\");\n                aiMessageDiv.className = \"ai-message\";\n                aiMessageDiv.innerHTML = \"<strong>AI Assistant (Fireworks):</strong> <span class='response-text'></span>\";\n                messagesContainer.appendChild(aiMessageDiv);\n                const responseSpan = aiMessageDiv.querySelector('.response-text');\n\n                const url = 'https://aimove.minesparis.psl.eu/api/chat';\n                const options = {\n                    method: 'POST',\n\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        \"message\": message,\n                        \"conversation_thread_id\": currentConversationThreadId\n                    })\n                };\n\n                try {\n                    const response = await fetch(url, options);\n                    console.log('Fetch response status:', response.status, response.statusText);\n\n                    if (!response.ok) {\n                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n                    }\n                    // Handle Server-Sent Events (SSE) response\n                    let aiResponse = '';\n                    let retrievedDocuments = [];\n                    let documentsProcessed = false;\n                    let lastAIMessageContent = \"\";\n                    const reader = response.body.getReader();\n                    const decoder = new TextDecoder();\n\n                    while (true) {\n                        const { done, value } = await reader.read();\n                        if (done) break;\n\n                        const lines = decoder.decode(value, { stream: true }).split('\\n');\n                        console.log('Received chunk:', lines);\n                        for (const line of lines) {\n                            if (!line.trim()) continue;\n                            try {\n                                const data = JSON.parse(line);\n                                console.log('Received SSE data:', data);\n                                if (data.content === '[DONE]') break;\n\n                                // Handle documents (process once when available)\n                                if (data.documents && Array.isArray(data.documents) && data.documents.length > 0 && !documentsProcessed) {\n                                    const document_sources = data.documents.map(doc => {\n                                        return doc.metadata?.source || 'Unknown source';\n                                    });\n                                    showDocuments(document_sources);\n                                    retrievedDocuments = document_sources;\n                                    documentsProcessed = true;\n                                }\n\n                                // Handle content from stream_mode=\"values\" (array of messages)\n                                if (data.content && Array.isArray(data.content)) {\n                                    // Find the latest AI message in the messages array\n                                    for (const msg of data.content) {\n                                        // Check for AIMessage type and extract content\n                                        if (msg.content && (msg.type === 'ai' || msg.__class__ === 'AIMessage' || typeof msg.content === 'string')) {\n                                            const currentAIContent = msg.content;\n                                            // Only update if the AI message content has changed\n                                            if (currentAIContent !== lastAIMessageContent) {\n                                                aiResponse = currentAIContent; // Replace with latest complete AI message\n                                                responseSpan.textContent = aiResponse;\n                                                messagesContainer.scrollTop = messagesContainer.scrollHeight;\n\n                                                // Convert markdown to HTML if marked is available\n                                                if (typeof marked !== 'undefined' && marked.parse) {\n                                                    const html_content = marked.parse(responseSpan.textContent);\n                                                    responseSpan.innerHTML = html_content;\n                                                }\n\n                                                lastAIMessageContent = currentAIContent;\n                                            }\n                                        }\n                                    }\n                                }\n                                // Fallback for stream_mode=\"messages\" (direct string content)\n                                else if (data.content && typeof data.content === 'string') {\n                                    aiResponse += data.content;\n                                    responseSpan.textContent = aiResponse;\n                                    messagesContainer.scrollTop = messagesContainer.scrollHeight;\n\n                                    if (typeof marked !== 'undefined' && marked.parse) {\n                                        const htmlContent = marked.parse(responseSpan.textContent);\n                                        responseSpan.innerHTML = htmlContent;\n                                    }\n                                }\n\n                                if (data.error) throw new Error(data.error);\n                            } catch (e) {\n                                console.error('Parse error:', e);\n                            }\n                        }\n                    }\n                    // Save AI response to database if we have content\n                    if (aiResponse && aiResponse.trim()) {\n                        console.log('Attempting to save AI response:', {\n                            conversationId: currentConversationThreadId,\n                            responseLength: aiResponse.length,\n                            responsePreview: aiResponse.substring(0, 100) + '...'\n                        });\n                        saveMessageToDatabase(currentConversationThreadId, 'ai', aiResponse);\n                    } else {\n                        console.log('No AI response to save:', {\n                            aiResponse: aiResponse,\n                            conversationId: currentConversationThreadId\n                        });\n                    }\n\n                } catch (error) {\n                    console.error('FastAPI call failed:', error);\n                    responseSpan.textContent = 'Sorry, there was an error processing your request: ' + error.message;\n                }\n\n                \n\n                // Final scroll to bottom\n                messagesContainer.scrollTop = messagesContainer.scrollHeight;\n            }, 1000);\n        }\n\n        /**\n         * Generate a UUID for new conversations\n         */\n        function generateUUID() {\n            if (typeof crypto !== 'undefined' && crypto.randomUUID) {\n                return crypto.randomUUID();\n            }\n            // Fallback UUID generation for older browsers\n            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                const r = Math.random() * 16 | 0;\n                const v = c === 'x' ? r : (r & 0x3 | 0x8);\n                return v.toString(16);\n            });\n        }\n\n        /**\n         * Create a new conversation\n         */\n        async function createNewConversation() {\n            const conversationId = generateUUID();\n            const conversationTitle = `New Conversation ${new Date().toLocaleTimeString()}`;\n\n            // Create new conversation DOM element using helper function\n            const conversationList = document.getElementById('ai-conversation-list');\n            const newConversationItem = createConversationElement(conversationId, conversationTitle);\n            conversationList.appendChild(newConversationItem);\n\n            // Remove active class from all items and set this one as active\n            const allItems = document.querySelectorAll('.ai-conversation-item');\n            allItems.forEach(item => item.classList.remove('active'));\n            newConversationItem.classList.add('active');\n\n            // Set as current conversation\n            currentConversationThreadId = conversationId;\n\n            // Clear chat messages and hide results area\n            messagesContainer.innerHTML = '';\n            hideResultsArea();\n\n            // Add click listener to the new item\n            setupConversationItemListener(newConversationItem);\n\n            // Create conversation in Moodle database\n            try {\n                await createConversationInMoodle(conversationId, conversationTitle);\n                console.log('New conversation created:', conversationId);\n            } catch (error) {\n                console.error('Failed to create conversation in Moodle:', error);\n                const errorDiv = document.createElement(\"div\");\n                errorDiv.className = \"ai-message\";\n                errorDiv.innerHTML = `<strong>AI Assistant:</strong> <em>Warning: Could not save conversation. Messages may not be saved.</em>`;\n                messagesContainer.appendChild(errorDiv);\n            }\n        }\n\n        /**\n         * Save a message to the database\n         */\n        function saveMessageToDatabase(conversationId, messageType, content, metadata = '') {\n            console.log('saveMessageToDatabase called with:', {\n                conversationId: conversationId,\n                messageType: messageType,\n                content: content.substring(0, 100) + (content.length > 100 ? '...' : ''),\n                metadata: metadata\n            });\n            \n            Ajax.call([{\n                methodname: 'block_aiassistant_manage_messages',\n                args: {\n                    action: 'save',\n                    conversation_id: conversationId,\n                    message_type: messageType,\n                    content: content,\n                    metadata: metadata\n                },\n                done: function (result) {\n                    console.log('AJAX response received:', result);\n                    if (result.success) {\n                        console.log(`Message saved successfully: ${messageType} message with ID ${result.message_id}`);\n                    } else {\n                        console.error('Failed to save message:', result.message);\n                    }\n                },\n                fail: function (error) {\n                    console.error('Failed to save message to database:', error);\n                    console.error('Error details:', {\n                        name: error.name,\n                        message: error.message,\n                        stack: error.stack\n                    });\n                }\n            }]);\n        }\n\n        /**\n         * Load messages for a conversation from database\n         */\n        function loadMessagesFromDatabase(conversationId) {\n            return new Promise((resolve, reject) => {\n                Ajax.call([{\n                    methodname: 'block_aiassistant_manage_messages',\n                    args: {\n                        action: 'load',\n                        conversation_id: conversationId\n                    },\n                    done: function (result) {\n                        if (result.success) {\n                            console.log(`Loaded ${result.messages.length} messages for conversation ${conversationId}`);\n                            resolve(result.messages);\n                        } else {\n                            console.error('Failed to load messages:', result.message);\n                            reject(new Error(result.message));\n                        }\n                    },\n                    fail: function (error) {\n                        console.error('Failed to load messages from database:', error);\n                        reject(error);\n                    }\n                }]);\n            });\n        }\n\n        /**\n         * Create conversation in Moodle database via Ajax\n         */\n        async function createConversationInMoodle(conversationId, conversationTitle) {\n            return new Promise((resolve, reject) => {\n                Ajax.call([{\n                    methodname: 'block_aiassistant_manage_conversations',\n                    args: {\n                        action: 'create',\n                        conversation_id: conversationId,\n                        title: conversationTitle\n                    },\n                    done: function (result) {\n                        if (result.success) {\n                            resolve(result);\n                        } else {\n                            reject(new Error(result.message || 'Failed to create conversation'));\n                        }\n                    },\n                    fail: function (error) {\n                        reject(error);\n                    }\n                }]);\n            });\n        }\n\n        /**\n         * Display messages in the chat interface\n         */\n        function displayMessages(messages) {\n            messagesContainer.innerHTML = '';\n\n            if (messages.length === 0) {\n                hideResultsArea();\n                return;\n            }\n\n            // Show results area if there are messages\n            showResultsArea();\n\n            messages.forEach(message => {\n                const messageDiv = document.createElement('div');\n                \n                if (message.message_type === 'user') {\n                    messageDiv.className = 'user-message';\n                    messageDiv.innerHTML = '<strong>You:</strong> ' + message.content;\n                } else if (message.message_type === 'ai') {\n                    messageDiv.className = 'ai-message';\n                    messageDiv.innerHTML = '<strong>AI Assistant:</strong> <span class=\"response-text\">' + message.content + '</span>';\n                    \n                    // Apply markdown rendering if available\n                    const responseSpan = messageDiv.querySelector('.response-text');\n                    if (typeof marked !== 'undefined' && marked.parse) {\n                        responseSpan.innerHTML = marked.parse(message.content);\n                    }\n                }\n                \n                messagesContainer.appendChild(messageDiv);\n            });\n\n            // Scroll to bottom\n            messagesContainer.scrollTop = messagesContainer.scrollHeight;\n        }\n\n        /**\n         * Setup event listener for a single conversation item\n         */\n        function setupConversationItemListener(item) {\n            item.addEventListener('click', function (e) {\n                // Don't trigger if clicking on delete button\n                if (e.target.classList.contains('ai-conversation-delete-btn')) {\n                    return;\n                }\n                \n                // Remove active class from all items\n                const allItems = document.querySelectorAll('.ai-conversation-item');\n                allItems.forEach(i => i.classList.remove('active'));\n\n                // Add active class to clicked item\n                this.classList.add('active');\n\n                // Get conversation data\n                const conversationId = this.getAttribute('data-conversation-id');\n                const conversationTitle = this.querySelector('.ai-conversation-title').textContent;\n\n                // Set as current conversation\n                currentConversationThreadId = conversationId;\n\n                console.log('Conversation selected:', {\n                    id: conversationId,\n                    title: conversationTitle\n                });\n\n                // Clear messages and show loading state\n                messagesContainer.innerHTML = '<div class=\"ai-message\"><strong>AI Assistant:</strong> <em>Loading conversation...</em></div>';\n\n                // Load messages from database\n                loadMessagesFromDatabase(conversationId)\n                    .then(messages => {\n                        displayMessages(messages);\n                    })\n                    .catch(error => {\n                        console.error('Failed to load messages:', error);\n                        showResultsArea();\n                        messagesContainer.innerHTML = '<div class=\"ai-message\"><strong>AI Assistant:</strong> <em>Failed to load conversation. Please try again.</em></div>';\n                    });\n            });\n        }\n\n        // Setup conversation panel event listeners\n        setupConversationPanel();\n\n        // Add event listeners\n        newConversationBtn.addEventListener('click', createNewConversation);\n        sendButton.addEventListener(\"click\", sendMessage);\n        \n        // Toggle conversations panel\n        if (conversationsToggle && conversationsPanel) {\n            conversationsToggle.addEventListener('click', function() {\n                conversationsPanel.classList.toggle('open');\n                conversationsToggle.classList.toggle('active');\n            });\n        }\n\n        /**\n         * Setup conversation panel functionality\n         */\n        function setupConversationPanel() {\n            const conversationItems = document.querySelectorAll('.ai-conversation-item');\n\n            conversationItems.forEach(item => {\n                setupConversationItemListener(item);\n            });\n        }\n        chatInput.addEventListener(\"keypress\", function (e) {\n            if (e.key === \"Enter\" && !e.shiftKey) {\n                e.preventDefault();\n                sendMessage();\n            }\n        });\n    };\n\n    // Try to initialize immediately if DOM is ready, otherwise wait for DOMContentLoaded\n    if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', initializeChat);\n    } else {\n        // DOM is already loaded, initialize immediately\n        initializeChat();\n    }\n};"],"mappings":"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","ignoreList":[]}