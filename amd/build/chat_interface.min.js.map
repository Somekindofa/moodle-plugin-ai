{"version":3,"file":"chat_interface.min.js","names":["Ajax","_interopRequireWildcard","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","_typeof","has","get","set","_t5","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","_regenerator","Symbol","iterator","toStringTag","c","prototype","Generator","u","create","_regeneratorDefine2","p","y","G","v","a","d","bind","length","l","TypeError","done","value","return","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","displayName","w","m","_regeneratorDefine","_invoke","enumerable","configurable","writable","_createForOfIteratorHelper","Array","isArray","_unsupportedIterableToArray","_n","F","s","next","_arrayLikeToArray","toString","slice","constructor","name","from","test","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","init","_exports","initializeChat","console","log","sendButton","document","getElementById","chatInput","messagesContainer","providerSelect","newConversationBtn","error","aiConfig","currentProvider","currentConversationThreadId","loadAIConfiguration","loadExistingConversations","showDocumentSidepanel","documentPaths","content","listHTML","concat","map","path","join","innerHTML","methodname","args","action","result","success","conversations","populateConversationsList","message","fail","conversationList","forEach","conversation","conversationItem","createConversationElement","conversation_id","title","appendChild","setupConversationItemListener","conversationId","createElement","className","setAttribute","titleSpan","textContent","deleteBtn","type","addEventListener","stopPropagation","deleteConversation","conversationTitle","querySelector","confirm","wasActive","classList","contains","remove","remainingConversations","querySelectorAll","click","alert","config","setupProviderUI","fireworks_available","showConfigurationError","stack","errorDiv","hasAvailableProvider","fireworksOption","disabled","savedProvider","localStorage","getItem","sendMessage","trim","createNewConversation","sendMessageWithConversation","catch","userMessageDiv","saveMessageToDatabase","loadingDiv","provider","credentials","removeChild","sendFireworksChatMessage","scrollTop","scrollHeight","_x","_x2","_sendFireworksChatMessage","_callee2","_context2","setTimeout","_callee","aiMessageDiv","responseSpan","url","options","response","aiResponse","retrievedDocuments","documentsProcessed","lastAIMessageContent","reader","decoder","_yield$reader$read","lines","_iterator","_step","line","data","document_sources","_iterator2","_step2","msg","currentAIContent","html_content","htmlContent","_t","_t2","_t3","_context","method","headers","body","JSON","stringify","fetch","status","statusText","ok","Error","getReader","TextDecoder","read","decode","stream","split","parse","documents","doc","_doc$metadata","metadata","source","__class__","marked","err","responseLength","responsePreview","substring","generateUUID","crypto","randomUUID","replace","Math","random","_createNewConversation","_callee3","newConversationItem","allItems","_t4","_context3","Date","toLocaleTimeString","item","add","createConversationInMoodle","messageType","undefined","message_type","message_id","loadMessagesFromDatabase","reject","messages","_x3","_x4","_createConversationInMoodle","_callee4","_context4","displayMessages","messageDiv","target","getAttribute","id","setupConversationPanel","conversationItems","key","shiftKey","preventDefault","readyState"],"sources":["../src/chat_interface.js"],"sourcesContent":["// Standard license block omitted for brevity\r\n/**\r\n * @module     block_aiassistant/chat_interface\r\n * @copyright  2025 Your Name\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport * as Ajax from 'core/ajax';\r\n\r\n/**\r\n * Initialize the AI chat interface\r\n */\r\nexport const init = () => {\r\n    // Function to initialize the chat interface\r\n    const initializeChat = () => {\r\n        console.log('AI Chat: Initializing...');\r\n\r\n        const sendButton = document.getElementById(\"ai-chat-send\");\r\n        const chatInput = document.getElementById(\"ai-chat-input\");\r\n        const messagesContainer = document.getElementById(\"ai-chat-messages\");\r\n        const providerSelect = document.getElementById(\"ai-provider-select\");\r\n        const newConversationBtn = document.getElementById(\"ai-new-conversation-btn\");\r\n\r\n        if (!sendButton || !chatInput || !messagesContainer || !providerSelect || !newConversationBtn) {\r\n            console.error('AI Chat: Required elements not found');\r\n            return;\r\n        }\r\n\r\n        // Global configuration storage\r\n        let aiConfig = null;\r\n        let currentProvider = 'fireworks';\r\n        let currentConversationThreadId = null;\r\n\r\n        // Load AI configuration on startup\r\n        loadAIConfiguration();\r\n        loadExistingConversations();\r\n\r\n        /**\r\n         * Displays a list of document paths in the sidepanel.\r\n         * Populates the sidepanel with the provided document paths.\r\n         * If no documents are provided, displays a \"No documents retrieved\" message.\r\n         * \r\n         * @param {string[]} documentPaths - Array of document file paths to display in the sidepanel\r\n         */\r\n        function showDocumentSidepanel(documentPaths) {\r\n            const content = document.getElementById('ai-sidepanel-content');\r\n\r\n            if (documentPaths && documentPaths.length > 0) {\r\n                const listHTML = `\r\n                    <ul class=\"ai-document-list\">\r\n                        ${documentPaths.map(path => `<li>${path}</li>`).join('')}\r\n                    </ul>\r\n                `;\r\n                content.innerHTML = listHTML;\r\n            } else {\r\n                content.innerHTML = '<p>No documents retrieved.</p>';\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Load existing conversations from Moodle database\r\n         */\r\n        function loadExistingConversations() {\r\n            Ajax.call([{\r\n                methodname: 'block_aiassistant_manage_conversations',\r\n                args: {\r\n                    action: 'list'\r\n                },\r\n                done: function (result) {\r\n                    if (result && result.success && result.conversations) {\r\n                        console.log('Existing conversations loaded:', result.conversations);\r\n                        populateConversationsList(result.conversations);\r\n                    } else {\r\n                        console.log('No existing conversations found or failed to load:', result ? result.message : 'No response received');\r\n                    }\r\n                },\r\n                fail: function (error) {\r\n                    console.error('Failed to load existing conversations:', error);\r\n                }\r\n            }]);\r\n        }\r\n\r\n        /**\r\n         * Populate the conversations list with existing conversations\r\n         */\r\n        function populateConversationsList(conversations) {\r\n            const conversationList = document.getElementById('ai-conversation-list');\r\n\r\n            // Clear existing items\r\n            conversationList.innerHTML = '';\r\n\r\n            // Add each conversation to the list\r\n            conversations.forEach(conversation => {\r\n                const conversationItem = createConversationElement(conversation.conversation_id, conversation.title);\r\n                conversationList.appendChild(conversationItem);\r\n\r\n                // Add click listener to the item\r\n                setupConversationItemListener(conversationItem);\r\n            });\r\n\r\n            console.log(`Populated ${conversations.length} conversations in the list`);\r\n        }\r\n\r\n        /**\r\n         * Create a conversation element with title and delete button\r\n         */\r\n        function createConversationElement(conversationId, title) {\r\n            const conversationItem = document.createElement('div');\r\n            conversationItem.className = 'ai-conversation-item';\r\n            conversationItem.setAttribute('data-conversation-id', conversationId);\r\n\r\n            const titleSpan = document.createElement('span');\r\n            titleSpan.className = 'ai-conversation-title';\r\n            titleSpan.textContent = title;\r\n\r\n            const deleteBtn = document.createElement('button');\r\n            deleteBtn.className = 'ai-conversation-delete-btn';\r\n            deleteBtn.textContent = 'Ã—';\r\n            deleteBtn.title = 'Delete conversation';\r\n            deleteBtn.type = 'button';\r\n\r\n            // Add click handler for delete button\r\n            deleteBtn.addEventListener('click', function(e) {\r\n                e.stopPropagation(); // Prevent conversation selection\r\n                deleteConversation(conversationId, conversationItem);\r\n            });\r\n\r\n            conversationItem.appendChild(titleSpan);\r\n            conversationItem.appendChild(deleteBtn);\r\n\r\n            return conversationItem;\r\n        }\r\n\r\n        /**\r\n         * Delete a conversation with confirmation\r\n         */\r\n        function deleteConversation(conversationId, conversationItem) {\r\n            const conversationTitle = conversationItem.querySelector('.ai-conversation-title').textContent;\r\n            \r\n            // Show confirmation dialog\r\n            if (!confirm(`Are you sure you want to delete \"${conversationTitle}\"? This will permanently delete the conversation and all its messages.`)) {\r\n                return;\r\n            }\r\n\r\n            // Call backend to delete conversation\r\n            Ajax.call([{\r\n                methodname: 'block_aiassistant_manage_conversations',\r\n                args: {\r\n                    action: 'delete',\r\n                    conversation_id: conversationId\r\n                },\r\n                done: function(result) {\r\n                    if (result.success) {\r\n                        console.log('Conversation deleted successfully:', conversationId);\r\n                        \r\n                        // Check if deleted conversation was the active one\r\n                        const wasActive = conversationItem.classList.contains('active');\r\n                        \r\n                        // Remove conversation from UI\r\n                        conversationItem.remove();\r\n                        \r\n                        // If this was the active conversation, create or select another one\r\n                        if (wasActive) {\r\n                            currentConversationThreadId = null;\r\n                            \r\n                            // Check if there are other conversations\r\n                            const remainingConversations = document.querySelectorAll('.ai-conversation-item');\r\n                            if (remainingConversations.length > 0) {\r\n                                // Select the first remaining conversation\r\n                                remainingConversations[0].click();\r\n                            } else {\r\n                                // No conversations left, clear the chat\r\n                                messagesContainer.innerHTML = '<div class=\"ai-message\"><strong>AI Assistant:</strong> Hello! How can I help you today?</div>';\r\n                            }\r\n                        }\r\n                    } else {\r\n                        console.error('Failed to delete conversation:', result.message);\r\n                        alert('Failed to delete conversation: ' + result.message);\r\n                    }\r\n                },\r\n                fail: function(error) {\r\n                    console.error('Failed to delete conversation:', error);\r\n                    alert('Failed to delete conversation. Please try again.');\r\n                }\r\n            }]);\r\n        }\r\n\r\n        /**\r\n         * Load AI configuration from backend\r\n         */\r\n        function loadAIConfiguration() {\r\n            Ajax.call([{\r\n                methodname: 'block_aiassistant_get_ai_config',\r\n                args: {},\r\n                done: function (config) {\r\n                    if (config && config.success) {\r\n                        aiConfig = config;\r\n                        console.log('AI Config loaded successfully.');\r\n                        setupProviderUI();\r\n                    } else {\r\n                        console.error('Failed to load AI configuration:', config ? config.message : 'No response received');\r\n                        aiConfig = {\r\n                            success: false,\r\n                            fireworks_available: false,\r\n                        };\r\n                        showConfigurationError('Failed to load AI configuration. Please check plugin settings.');\r\n                    }\r\n                },\r\n                fail: function (error) {\r\n                    console.error('Error details:', {\r\n                        name: error.name,\r\n                        message: error.message,\r\n                        stack: error.stack\r\n                    });\r\n                    aiConfig = {\r\n                        success: false,\r\n                        fireworks_available: false,\r\n                    };\r\n                    showConfigurationError('Could not connect to AI configuration service.');\r\n                }\r\n            }]);\r\n        }\r\n\r\n        /**\r\n         * Show configuration error in chat\r\n         */\r\n        function showConfigurationError(message) {\r\n            const errorDiv = document.createElement(\"div\");\r\n            errorDiv.className = \"ai-message\";\r\n            errorDiv.innerHTML = `<strong>AI Assistant:</strong> <em>Error: ${message}</em>`;\r\n            messagesContainer.appendChild(errorDiv);\r\n        }\r\n\r\n        /**\r\n         * Setup provider UI based on configuration\r\n         */\r\n        function setupProviderUI() {\r\n            // Ensure aiConfig exists before proceeding\r\n            if (!aiConfig) {\r\n                console.error('AI configuration not loaded, cannot setup provider UI');\r\n                return;\r\n            }\r\n            // Clear existing options\r\n            providerSelect.innerHTML = '';\r\n\r\n            let hasAvailableProvider = false;\r\n\r\n            // Add available providers\r\n            if (aiConfig && aiConfig.fireworks_available) {\r\n                const fireworksOption = document.createElement('option');\r\n                fireworksOption.value = 'fireworks';\r\n                fireworksOption.textContent = 'Fireworks.ai';\r\n                providerSelect.appendChild(fireworksOption);\r\n                hasAvailableProvider = true;\r\n            }\r\n\r\n            // If no providers are available, add disabled options\r\n            if (!hasAvailableProvider) {\r\n                if (!aiConfig || !aiConfig.fireworks_available) {\r\n                    const fireworksOption = document.createElement('option');\r\n                    fireworksOption.value = 'fireworks';\r\n                    fireworksOption.textContent = 'Fireworks.ai (Not configured)';\r\n                    fireworksOption.disabled = true;\r\n                    providerSelect.appendChild(fireworksOption);\r\n                }\r\n\r\n                showConfigurationError('No AI providers are configured. Please check plugin settings.');\r\n                return;\r\n            }\r\n\r\n            // Restore saved selections\r\n            const savedProvider = localStorage.getItem('ai-chat-provider');\r\n\r\n            if (savedProvider && document.querySelector(`option[value=\"${savedProvider}\"]`)) {\r\n                providerSelect.value = savedProvider;\r\n                currentProvider = savedProvider;\r\n            } else if (aiConfig && aiConfig.fireworks_available) {\r\n                currentProvider = 'fireworks';\r\n                providerSelect.value = 'fireworks';\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Send a message to the AI assistant\r\n         */\r\n        function sendMessage() {\r\n            const message = chatInput.value.trim();\r\n            if (!message) {\r\n                return;\r\n            }\r\n\r\n            // Check if we have a valid configuration\r\n            if (!aiConfig || !aiConfig.fireworks_available) {\r\n                showConfigurationError('No AI providers are configured. Please check plugin settings.');\r\n                return;\r\n            }\r\n\r\n            // If no conversation is selected, create a new one\r\n            if (!currentConversationThreadId) {\r\n                createNewConversation().then(() => {\r\n                    // After creating conversation, send the message\r\n                    sendMessageWithConversation(message, currentConversationThreadId);\r\n                }).catch(error => {\r\n                    console.error('Failed to create new conversation:', error);\r\n                    showConfigurationError('Failed to create new conversation. Please try again.');\r\n                });\r\n                return;\r\n            }\r\n\r\n            sendMessageWithConversation(message, currentConversationThreadId);\r\n        }\r\n\r\n        /**\r\n         * Send message with existing conversation\r\n         */\r\n        function sendMessageWithConversation(message, currentConversationThreadId) {\r\n            console.log('sendMessageWithConversation called with:', {\r\n                message: message,\r\n                conversationId: currentConversationThreadId\r\n            });\r\n            \r\n            // Add user message\r\n            const userMessageDiv = document.createElement(\"div\");\r\n            userMessageDiv.className = \"user-message\";\r\n            userMessageDiv.innerHTML = \"<strong>You:</strong> \" + message;\r\n            messagesContainer.appendChild(userMessageDiv);\r\n\r\n            // Save user message to database\r\n            saveMessageToDatabase(currentConversationThreadId, 'user', message);\r\n\r\n            // Clear input\r\n            chatInput.value = \"\";\r\n\r\n            // Show loading state\r\n            const loadingDiv = document.createElement(\"div\");\r\n            loadingDiv.className = \"ai-message\";\r\n            loadingDiv.innerHTML = `<strong>AI Assistant:</strong> <em>Getting your credentials for ${currentProvider}...</em>`;\r\n            messagesContainer.appendChild(loadingDiv);\r\n\r\n            // Get user credentials via AJAX\r\n            Ajax.call([{\r\n                methodname: 'block_aiassistant_get_user_credentials',\r\n                args: { provider: currentProvider },\r\n                done: function (credentials) {\r\n                    // Remove loading message\r\n                    messagesContainer.removeChild(loadingDiv);\r\n\r\n                    if (credentials.success) {\r\n                        sendFireworksChatMessage(message, currentConversationThreadId);\r\n                    } else {\r\n                        const errorDiv = document.createElement(\"div\");\r\n                        errorDiv.className = \"ai-message\";\r\n                        errorDiv.innerHTML = \"<strong>AI Assistant:</strong> <em>Error: \" + credentials.message + \"</em>\";\r\n                        messagesContainer.appendChild(errorDiv);\r\n                    }\r\n                },\r\n                fail: function (error) {\r\n                    // Remove loading message\r\n                    if (messagesContainer.contains(loadingDiv)) {\r\n                        messagesContainer.removeChild(loadingDiv);\r\n                    }\r\n\r\n                    const errorDiv = document.createElement(\"div\");\r\n                    errorDiv.className = \"ai-message\";\r\n                    errorDiv.innerHTML = \"<strong>AI Assistant:</strong> <em>Failed to get credentials: \" +\r\n                        (error.message || 'Unknown error') + \"</em>\";\r\n                    messagesContainer.appendChild(errorDiv);\r\n                }\r\n            }]);\r\n\r\n            // Scroll to bottom\r\n            messagesContainer.scrollTop = messagesContainer.scrollHeight;\r\n        }\r\n\r\n        /**\r\n         * Send chat message to Fireworks API (Direct API approach)\r\n         * @param {string} message - The message to send\r\n         */\r\n        async function sendFireworksChatMessage(message, currentConversationThreadId) {\r\n            setTimeout(async function () {\r\n                const aiMessageDiv = document.createElement(\"div\");\r\n                aiMessageDiv.className = \"ai-message\";\r\n                aiMessageDiv.innerHTML = \"<strong>AI Assistant (Fireworks):</strong> <span class='response-text'></span>\";\r\n                messagesContainer.appendChild(aiMessageDiv);\r\n                const responseSpan = aiMessageDiv.querySelector('.response-text');\r\n\r\n                const url = 'https://aimove.minesparis.psl.eu/api/chat';\r\n                const options = {\r\n                    method: 'POST',\r\n\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify({\r\n                        \"message\": message,\r\n                        \"conversation_thread_id\": currentConversationThreadId\r\n                    })\r\n                };\r\n\r\n                try {\r\n                    const response = await fetch(url, options);\r\n                    console.log('Fetch response status:', response.status, response.statusText);\r\n\r\n                    if (!response.ok) {\r\n                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n                    }\r\n                    // Handle Server-Sent Events (SSE) response\r\n                    let aiResponse = '';\r\n                    let retrievedDocuments = [];\r\n                    let documentsProcessed = false;\r\n                    let lastAIMessageContent = \"\";\r\n                    const reader = response.body.getReader();\r\n                    const decoder = new TextDecoder();\r\n\r\n                    while (true) {\r\n                        const { done, value } = await reader.read();\r\n                        if (done) break;\r\n\r\n                        const lines = decoder.decode(value, { stream: true }).split('\\n');\r\n                        console.log('Received chunk:', lines);\r\n                        for (const line of lines) {\r\n                            if (!line.trim()) continue;\r\n                            try {\r\n                                const data = JSON.parse(line);\r\n                                console.log('Received SSE data:', data);\r\n                                if (data.content === '[DONE]') break;\r\n\r\n                                // Handle documents (process once when available)\r\n                                if (data.documents && Array.isArray(data.documents) && data.documents.length > 0 && !documentsProcessed) {\r\n                                    const document_sources = data.documents.map(doc => {\r\n                                        return doc.metadata?.source || 'Unknown source';\r\n                                    });\r\n                                    showDocumentSidepanel(document_sources);\r\n                                    retrievedDocuments = document_sources;\r\n                                    documentsProcessed = true;\r\n                                }\r\n\r\n                                // Handle content from stream_mode=\"values\" (array of messages)\r\n                                if (data.content && Array.isArray(data.content)) {\r\n                                    // Find the latest AI message in the messages array\r\n                                    for (const msg of data.content) {\r\n                                        // Check for AIMessage type and extract content\r\n                                        if (msg.content && (msg.type === 'ai' || msg.__class__ === 'AIMessage' || typeof msg.content === 'string')) {\r\n                                            const currentAIContent = msg.content;\r\n                                            // Only update if the AI message content has changed\r\n                                            if (currentAIContent !== lastAIMessageContent) {\r\n                                                aiResponse = currentAIContent; // Replace with latest complete AI message\r\n                                                responseSpan.textContent = aiResponse;\r\n                                                messagesContainer.scrollTop = messagesContainer.scrollHeight;\r\n\r\n                                                // Convert markdown to HTML if marked is available\r\n                                                if (typeof marked !== 'undefined' && marked.parse) {\r\n                                                    const html_content = marked.parse(responseSpan.textContent);\r\n                                                    responseSpan.innerHTML = html_content;\r\n                                                }\r\n\r\n                                                lastAIMessageContent = currentAIContent;\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                                // Fallback for stream_mode=\"messages\" (direct string content)\r\n                                else if (data.content && typeof data.content === 'string') {\r\n                                    aiResponse += data.content;\r\n                                    responseSpan.textContent = aiResponse;\r\n                                    messagesContainer.scrollTop = messagesContainer.scrollHeight;\r\n\r\n                                    if (typeof marked !== 'undefined' && marked.parse) {\r\n                                        const htmlContent = marked.parse(responseSpan.textContent);\r\n                                        responseSpan.innerHTML = htmlContent;\r\n                                    }\r\n                                }\r\n\r\n                                if (data.error) throw new Error(data.error);\r\n                            } catch (e) {\r\n                                console.error('Parse error:', e);\r\n                            }\r\n                        }\r\n                    }\r\n                    // Save AI response to database if we have content\r\n                    if (aiResponse && aiResponse.trim()) {\r\n                        console.log('Attempting to save AI response:', {\r\n                            conversationId: currentConversationThreadId,\r\n                            responseLength: aiResponse.length,\r\n                            responsePreview: aiResponse.substring(0, 100) + '...'\r\n                        });\r\n                        saveMessageToDatabase(currentConversationThreadId, 'ai', aiResponse);\r\n                    } else {\r\n                        console.log('No AI response to save:', {\r\n                            aiResponse: aiResponse,\r\n                            conversationId: currentConversationThreadId\r\n                        });\r\n                    }\r\n\r\n                } catch (error) {\r\n                    console.error('FastAPI call failed:', error);\r\n                    responseSpan.textContent = 'Sorry, there was an error processing your request: ' + error.message;\r\n                }\r\n\r\n                \r\n\r\n                // Final scroll to bottom\r\n                messagesContainer.scrollTop = messagesContainer.scrollHeight;\r\n            }, 1000);\r\n        }\r\n\r\n        /**\r\n         * Generate a UUID for new conversations\r\n         */\r\n        function generateUUID() {\r\n            if (typeof crypto !== 'undefined' && crypto.randomUUID) {\r\n                return crypto.randomUUID();\r\n            }\r\n            // Fallback UUID generation for older browsers\r\n            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n                const r = Math.random() * 16 | 0;\r\n                const v = c === 'x' ? r : (r & 0x3 | 0x8);\r\n                return v.toString(16);\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Create a new conversation\r\n         */\r\n        async function createNewConversation() {\r\n            const conversationId = generateUUID();\r\n            const conversationTitle = `New Conversation ${new Date().toLocaleTimeString()}`;\r\n\r\n            // Create new conversation DOM element using helper function\r\n            const conversationList = document.getElementById('ai-conversation-list');\r\n            const newConversationItem = createConversationElement(conversationId, conversationTitle);\r\n            conversationList.appendChild(newConversationItem);\r\n\r\n            // Remove active class from all items and set this one as active\r\n            const allItems = document.querySelectorAll('.ai-conversation-item');\r\n            allItems.forEach(item => item.classList.remove('active'));\r\n            newConversationItem.classList.add('active');\r\n\r\n            // Set as current conversation\r\n            currentConversationThreadId = conversationId;\r\n\r\n            // Clear chat messages\r\n            messagesContainer.innerHTML = '<div class=\"ai-message\"><strong>AI Assistant:</strong> Hello! How can I help you today?</div>';\r\n\r\n            // Add click listener to the new item\r\n            setupConversationItemListener(newConversationItem);\r\n\r\n            // Create conversation in Moodle database\r\n            try {\r\n                await createConversationInMoodle(conversationId, conversationTitle);\r\n                console.log('New conversation created:', conversationId);\r\n            } catch (error) {\r\n                console.error('Failed to create conversation in Moodle:', error);\r\n                const errorDiv = document.createElement(\"div\");\r\n                errorDiv.className = \"ai-message\";\r\n                errorDiv.innerHTML = `<strong>AI Assistant:</strong> <em>Warning: Could not save conversation. Messages may not be saved.</em>`;\r\n                messagesContainer.appendChild(errorDiv);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Save a message to the database\r\n         */\r\n        function saveMessageToDatabase(conversationId, messageType, content, metadata = '') {\r\n            console.log('saveMessageToDatabase called with:', {\r\n                conversationId: conversationId,\r\n                messageType: messageType,\r\n                content: content.substring(0, 100) + (content.length > 100 ? '...' : ''),\r\n                metadata: metadata\r\n            });\r\n            \r\n            Ajax.call([{\r\n                methodname: 'block_aiassistant_manage_messages',\r\n                args: {\r\n                    action: 'save',\r\n                    conversation_id: conversationId,\r\n                    message_type: messageType,\r\n                    content: content,\r\n                    metadata: metadata\r\n                },\r\n                done: function (result) {\r\n                    console.log('AJAX response received:', result);\r\n                    if (result.success) {\r\n                        console.log(`Message saved successfully: ${messageType} message with ID ${result.message_id}`);\r\n                    } else {\r\n                        console.error('Failed to save message:', result.message);\r\n                    }\r\n                },\r\n                fail: function (error) {\r\n                    console.error('Failed to save message to database:', error);\r\n                    console.error('Error details:', {\r\n                        name: error.name,\r\n                        message: error.message,\r\n                        stack: error.stack\r\n                    });\r\n                }\r\n            }]);\r\n        }\r\n\r\n        /**\r\n         * Load messages for a conversation from database\r\n         */\r\n        function loadMessagesFromDatabase(conversationId) {\r\n            return new Promise((resolve, reject) => {\r\n                Ajax.call([{\r\n                    methodname: 'block_aiassistant_manage_messages',\r\n                    args: {\r\n                        action: 'load',\r\n                        conversation_id: conversationId\r\n                    },\r\n                    done: function (result) {\r\n                        if (result.success) {\r\n                            console.log(`Loaded ${result.messages.length} messages for conversation ${conversationId}`);\r\n                            resolve(result.messages);\r\n                        } else {\r\n                            console.error('Failed to load messages:', result.message);\r\n                            reject(new Error(result.message));\r\n                        }\r\n                    },\r\n                    fail: function (error) {\r\n                        console.error('Failed to load messages from database:', error);\r\n                        reject(error);\r\n                    }\r\n                }]);\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Create conversation in Moodle database via Ajax\r\n         */\r\n        async function createConversationInMoodle(conversationId, conversationTitle) {\r\n            return new Promise((resolve, reject) => {\r\n                Ajax.call([{\r\n                    methodname: 'block_aiassistant_manage_conversations',\r\n                    args: {\r\n                        action: 'create',\r\n                        conversation_id: conversationId,\r\n                        title: conversationTitle\r\n                    },\r\n                    done: function (result) {\r\n                        if (result.success) {\r\n                            resolve(result);\r\n                        } else {\r\n                            reject(new Error(result.message || 'Failed to create conversation'));\r\n                        }\r\n                    },\r\n                    fail: function (error) {\r\n                        reject(error);\r\n                    }\r\n                }]);\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Display messages in the chat interface\r\n         */\r\n        function displayMessages(messages) {\r\n            messagesContainer.innerHTML = '';\r\n\r\n            if (messages.length === 0) {\r\n                messagesContainer.innerHTML = '<div class=\"ai-message\"><strong>AI Assistant:</strong> Hello! How can I help you today?</div>';\r\n                return;\r\n            }\r\n\r\n            messages.forEach(message => {\r\n                const messageDiv = document.createElement('div');\r\n                \r\n                if (message.message_type === 'user') {\r\n                    messageDiv.className = 'user-message';\r\n                    messageDiv.innerHTML = '<strong>You:</strong> ' + message.content;\r\n                } else if (message.message_type === 'ai') {\r\n                    messageDiv.className = 'ai-message';\r\n                    messageDiv.innerHTML = '<strong>AI Assistant:</strong> <span class=\"response-text\">' + message.content + '</span>';\r\n                    \r\n                    // Apply markdown rendering if available\r\n                    const responseSpan = messageDiv.querySelector('.response-text');\r\n                    if (typeof marked !== 'undefined' && marked.parse) {\r\n                        responseSpan.innerHTML = marked.parse(message.content);\r\n                    }\r\n                }\r\n                \r\n                messagesContainer.appendChild(messageDiv);\r\n            });\r\n\r\n            // Scroll to bottom\r\n            messagesContainer.scrollTop = messagesContainer.scrollHeight;\r\n        }\r\n\r\n        /**\r\n         * Setup event listener for a single conversation item\r\n         */\r\n        function setupConversationItemListener(item) {\r\n            item.addEventListener('click', function (e) {\r\n                // Don't trigger if clicking on delete button\r\n                if (e.target.classList.contains('ai-conversation-delete-btn')) {\r\n                    return;\r\n                }\r\n                \r\n                // Remove active class from all items\r\n                const allItems = document.querySelectorAll('.ai-conversation-item');\r\n                allItems.forEach(i => i.classList.remove('active'));\r\n\r\n                // Add active class to clicked item\r\n                this.classList.add('active');\r\n\r\n                // Get conversation data\r\n                const conversationId = this.getAttribute('data-conversation-id');\r\n                const conversationTitle = this.querySelector('.ai-conversation-title').textContent;\r\n\r\n                // Set as current conversation\r\n                currentConversationThreadId = conversationId;\r\n\r\n                console.log('Conversation selected:', {\r\n                    id: conversationId,\r\n                    title: conversationTitle\r\n                });\r\n\r\n                // Clear messages and show loading state\r\n                messagesContainer.innerHTML = '<div class=\"ai-message\"><strong>AI Assistant:</strong> <em>Loading conversation...</em></div>';\r\n\r\n                // Load messages from database\r\n                loadMessagesFromDatabase(conversationId)\r\n                    .then(messages => {\r\n                        displayMessages(messages);\r\n                    })\r\n                    .catch(error => {\r\n                        console.error('Failed to load messages:', error);\r\n                        messagesContainer.innerHTML = '<div class=\"ai-message\"><strong>AI Assistant:</strong> <em>Failed to load conversation. Please try again.</em></div>';\r\n                    });\r\n            });\r\n        }\r\n\r\n        // Setup conversation panel event listeners\r\n        setupConversationPanel();\r\n\r\n        // Add event listeners\r\n        newConversationBtn.addEventListener('click', createNewConversation);\r\n        sendButton.addEventListener(\"click\", sendMessage);\r\n\r\n        /**\r\n         * Setup conversation panel functionality\r\n         */\r\n        function setupConversationPanel() {\r\n            const conversationItems = document.querySelectorAll('.ai-conversation-item');\r\n\r\n            conversationItems.forEach(item => {\r\n                setupConversationItemListener(item);\r\n            });\r\n        }\r\n        chatInput.addEventListener(\"keypress\", function (e) {\r\n            if (e.key === \"Enter\" && !e.shiftKey) {\r\n                e.preventDefault();\r\n                sendMessage();\r\n            }\r\n        });\r\n    };\r\n\r\n    // Try to initialize immediately if DOM is ready, otherwise wait for DOMContentLoaded\r\n    if (document.readyState === 'loading') {\r\n        document.addEventListener('DOMContentLoaded', initializeChat);\r\n    } else {\r\n        // DOM is already loaded, initialize immediately\r\n        initializeChat();\r\n    }\r\n};"],"mappings":"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","ignoreList":[]}