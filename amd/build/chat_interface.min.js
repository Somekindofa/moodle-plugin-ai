function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
define(["exports", "core/ajax"], function (_exports, Ajax) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.init = void 0;
  Ajax = _interopRequireWildcard(Ajax);
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t4 in e) "default" !== _t4 && {}.hasOwnProperty.call(e, _t4) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t4)) && (i.get || i.set) ? o(f, _t4, i) : f[_t4] = e[_t4]); return f; })(e, t); }
  function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i.return) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
  function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o("next", 0), o("throw", 1), o("return", 2)); }, _regeneratorDefine2(e, r, n, t); }
  function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
  function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
  function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
  function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
  function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; } // Standard license block omitted for brevity
  /**
 * @module     block_aiassistant/chat_interface
 * @copyright  2025 Your Name
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
  var conversationHistory = [];

  /**
   * Initialize the AI chat interface
   */
  var init = _exports.init = function init() {
    // Function to initialize the chat interface
    var initializeChat = function initializeChat() {
      console.log('AI Chat: Initializing...');
      var sendButton = document.getElementById("ai-chat-send");
      var chatInput = document.getElementById("ai-chat-input");
      var messagesContainer = document.getElementById("ai-chat-messages");
      var chatContainer = document.getElementById("ai-chat-container");
      var resizeHandle = document.getElementById("ai-resize-handle");
      var providerSelect = document.getElementById("ai-provider-select");
      if (!sendButton || !chatInput || !messagesContainer || !providerSelect) {
        console.error('AI Chat: Required elements not found');
        return;
      }

      // Global configuration storage
      var aiConfig = null;
      var currentProvider = 'fireworks';

      // Load AI configuration on startup
      loadAIConfiguration();

      /**
       * Displays a sidepanel containing a list of document paths.
       * Shows the sidepanel with a smooth animation and populates it with the provided document paths.
       * If no documents are provided, displays a "No documents retrieved" message.
       * 
       * @param {string[]} documentPaths - Array of document file paths to display in the sidepanel
       */
      function showDocumentSidepanel(documentPaths) {
        var sidepanel = document.getElementById('ai-sidepanel');
        var content = document.getElementById('ai-sidepanel-content');
        if (documentPaths && documentPaths.length > 0) {
          var listHTML = "\n                    <ul class=\"ai-document-list\">\n                        ".concat(documentPaths.map(function (path) {
            return "<li>".concat(path, "</li>");
          }).join(''), "\n                    </ul>\n                ");
          content.innerHTML = listHTML;
        } else {
          content.innerHTML = '<p>No documents retrieved.</p>';
        }
        sidepanel.style.display = 'block';
        setTimeout(function () {
          return sidepanel.classList.add('active');
        }, 10);
      }

      /**
       * Hides the document sidepanel by removing the 'active' class and setting display to 'none' after a delay.
       * The function first removes the 'active' class from the AI sidepanel element, then waits 300ms
       * before completely hiding the element by setting its display style to 'none'.
       * 
       * @function hideDocumentSidepanel
       * @returns {void}
       */
      function hideDocumentSidepanel() {
        var sidepanel = document.getElementById('ai-sidepanel');
        sidepanel.classList.remove('active');
        setTimeout(function () {
          return sidepanel.style.display = 'none';
        }, 300);
      }
      document.addEventListener('DOMContentLoaded', function () {
        var closeButton = document.getElementById('ai-sidepanel-close');
        if (closeButton) {
          closeButton.addEventListener('click', hideDocumentSidepanel);
        }
      });

      /**
       * Load AI configuration from backend
       */
      function loadAIConfiguration() {
        Ajax.call([{
          methodname: 'block_aiassistant_get_ai_config',
          args: {},
          done: function done(config) {
            if (config && config.success) {
              aiConfig = config;
              console.log('AI Config loaded successfully:', aiConfig);
              setupProviderUI();
            } else {
              console.error('Failed to load AI configuration:', config ? config.message : 'No response received');
              aiConfig = {
                success: false,
                fireworks_available: false
              };
              showConfigurationError('Failed to load AI configuration. Please check plugin settings.');
            }
          },
          fail: function fail(error) {
            console.error('Error details:', {
              name: error.name,
              message: error.message,
              stack: error.stack
            });
            aiConfig = {
              success: false,
              fireworks_available: false
            };
            showConfigurationError('Could not connect to AI configuration service.');
          }
        }]);
      }

      /**
       * Show configuration error in chat
       */
      function showConfigurationError(message) {
        var errorDiv = document.createElement("div");
        errorDiv.className = "ai-message";
        errorDiv.innerHTML = "<strong>AI Assistant:</strong> <em>Error: ".concat(message, "</em>");
        messagesContainer.appendChild(errorDiv);
      }

      /**
       * Setup provider UI based on configuration
       */
      function setupProviderUI() {
        // Ensure aiConfig exists before proceeding
        if (!aiConfig) {
          console.error('AI configuration not loaded, cannot setup provider UI');
          return;
        }
        // Clear existing options
        providerSelect.innerHTML = '';
        var hasAvailableProvider = false;

        // Add available providers
        if (aiConfig && aiConfig.fireworks_available) {
          var fireworksOption = document.createElement('option');
          fireworksOption.value = 'fireworks';
          fireworksOption.textContent = 'Fireworks.ai';
          providerSelect.appendChild(fireworksOption);
          hasAvailableProvider = true;
        }

        // If no providers are available, add disabled options
        if (!hasAvailableProvider) {
          if (!aiConfig || !aiConfig.fireworks_available) {
            var _fireworksOption = document.createElement('option');
            _fireworksOption.value = 'fireworks';
            _fireworksOption.textContent = 'Fireworks.ai (Not configured)';
            _fireworksOption.disabled = true;
            providerSelect.appendChild(_fireworksOption);
          }
          showConfigurationError('No AI providers are configured. Please check plugin settings.');
          return;
        }

        // Restore saved selections
        var savedProvider = localStorage.getItem('ai-chat-provider');
        if (savedProvider && document.querySelector("option[value=\"".concat(savedProvider, "\"]"))) {
          providerSelect.value = savedProvider;
          currentProvider = savedProvider;
        } else if (aiConfig && aiConfig.fireworks_available) {
          currentProvider = 'fireworks';
          providerSelect.value = 'fireworks';
        }
      }

      /**
       * Send a message to the AI assistant
       */
      function sendMessage() {
        var message = chatInput.value.trim();
        if (!message) {
          return;
        }

        // Check if we have a valid configuration
        if (!aiConfig || !aiConfig.fireworks_available) {
          showConfigurationError('No AI providers are configured. Please check plugin settings.');
          return;
        }

        // Add user message
        var userMessageDiv = document.createElement("div");
        userMessageDiv.className = "user-message";
        userMessageDiv.innerHTML = "<strong>You:</strong> " + message;
        messagesContainer.appendChild(userMessageDiv);

        // Clear input
        chatInput.value = "";

        // Show loading state
        var loadingDiv = document.createElement("div");
        loadingDiv.className = "ai-message";
        loadingDiv.innerHTML = "<strong>AI Assistant:</strong> <em>Getting your credentials for ".concat(currentProvider, "...</em>");
        messagesContainer.appendChild(loadingDiv);

        // Get user credentials via AJAX
        Ajax.call([{
          methodname: 'block_aiassistant_get_user_credentials',
          args: {
            provider: currentProvider
          },
          done: function done(credentials) {
            // Remove loading message
            messagesContainer.removeChild(loadingDiv);
            if (credentials.success) {
              sendFireworksChatMessage(message, credentials.api_key);
            } else {
              var errorDiv = document.createElement("div");
              errorDiv.className = "ai-message";
              errorDiv.innerHTML = "<strong>AI Assistant:</strong> <em>Error: " + credentials.message + "</em>";
              messagesContainer.appendChild(errorDiv);
            }
          },
          fail: function fail(error) {
            // Remove loading message
            if (messagesContainer.contains(loadingDiv)) {
              messagesContainer.removeChild(loadingDiv);
            }
            var errorDiv = document.createElement("div");
            errorDiv.className = "ai-message";
            errorDiv.innerHTML = "<strong>AI Assistant:</strong> <em>Failed to get credentials: " + (error.message || 'Unknown error') + "</em>";
            messagesContainer.appendChild(errorDiv);
          }
        }]);

        // Scroll to bottom
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
      }

      /**
       * Send chat message to Fireworks API (Direct API approach)
       * @param {string} message - The message to send
       */
      function sendFireworksChatMessage(_x) {
        return _sendFireworksChatMessage.apply(this, arguments);
      }
      function _sendFireworksChatMessage() {
        _sendFireworksChatMessage = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(message) {
          return _regenerator().w(function (_context2) {
            while (1) switch (_context2.n) {
              case 0:
                setTimeout(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {
                  var aiMessageDiv, responseSpan, url, options, response, aiResponse, reader, decoder, _yield$reader$read, done, value, lines, _iterator, _step, line, data, htmlContent, _t, _t2, _t3;
                  return _regenerator().w(function (_context) {
                    while (1) switch (_context.p = _context.n) {
                      case 0:
                        aiMessageDiv = document.createElement("div");
                        aiMessageDiv.className = "ai-message";
                        aiMessageDiv.innerHTML = "<strong>AI Assistant (Fireworks):</strong> <span class='response-text'></span>";
                        messagesContainer.appendChild(aiMessageDiv);
                        responseSpan = aiMessageDiv.querySelector('.response-text');
                        url = 'http://127.0.0.1:8000/api/chat'; // Adjust
                        options = {
                          method: 'POST',
                          headers: {
                            'Content-Type': 'application/json'
                          },
                          body: JSON.stringify({
                            "message": message
                          })
                        };
                        _context.p = 1;
                        _context.n = 2;
                        return fetch(url, options);
                      case 2:
                        response = _context.v;
                        if (response.ok) {
                          _context.n = 3;
                          break;
                        }
                        throw new Error("HTTP ".concat(response.status, ": ").concat(response.statusText));
                      case 3:
                        // Handle Server-Sent Events (SSE) response
                        aiResponse = '';
                        reader = response.body.getReader();
                        decoder = new TextDecoder();
                      case 4:
                        if (!true) {
                          _context.n = 18;
                          break;
                        }
                        _context.n = 5;
                        return reader.read();
                      case 5:
                        _yield$reader$read = _context.v;
                        done = _yield$reader$read.done;
                        value = _yield$reader$read.value;
                        if (!done) {
                          _context.n = 6;
                          break;
                        }
                        return _context.a(3, 18);
                      case 6:
                        lines = decoder.decode(value, {
                          stream: true
                        }).split('\n');
                        _iterator = _createForOfIteratorHelper(lines);
                        _context.p = 7;
                        _iterator.s();
                      case 8:
                        if ((_step = _iterator.n()).done) {
                          _context.n = 14;
                          break;
                        }
                        line = _step.value;
                        if (line.trim()) {
                          _context.n = 9;
                          break;
                        }
                        return _context.a(3, 13);
                      case 9:
                        _context.p = 9;
                        data = JSON.parse(line);
                        if (!(data.content === '[DONE]')) {
                          _context.n = 10;
                          break;
                        }
                        return _context.a(3, 14);
                      case 10:
                        if (data.content) {
                          aiResponse += data.content;
                          responseSpan.textContent = aiResponse;
                          messagesContainer.scrollTop = messagesContainer.scrollHeight;

                          // Convert final markdown to HTML if marked is available
                          if (typeof marked !== 'undefined' && marked.parse) {
                            htmlContent = marked.parse(responseSpan.textContent);
                            responseSpan.innerHTML = htmlContent;
                          }
                        }
                        if (!data.error) {
                          _context.n = 11;
                          break;
                        }
                        throw new Error(data.error);
                      case 11:
                        _context.n = 13;
                        break;
                      case 12:
                        _context.p = 12;
                        _t = _context.v;
                        console.error('Parse error:', _t);
                      case 13:
                        _context.n = 8;
                        break;
                      case 14:
                        _context.n = 16;
                        break;
                      case 15:
                        _context.p = 15;
                        _t2 = _context.v;
                        _iterator.e(_t2);
                      case 16:
                        _context.p = 16;
                        _iterator.f();
                        return _context.f(16);
                      case 17:
                        _context.n = 4;
                        break;
                      case 18:
                        // Update conversation history
                        conversationHistory.push({
                          role: "user",
                          content: message
                        }, {
                          role: "assistant",
                          content: aiResponse
                        });
                        _context.n = 20;
                        break;
                      case 19:
                        _context.p = 19;
                        _t3 = _context.v;
                        console.error('FastAPI call failed:', _t3);
                        responseSpan.textContent = 'Sorry, there was an error processing your request: ' + _t3.message;
                      case 20:
                        // Final scroll to bottom
                        messagesContainer.scrollTop = messagesContainer.scrollHeight;
                      case 21:
                        return _context.a(2);
                    }
                  }, _callee, null, [[9, 12], [7, 15, 16, 17], [1, 19]]);
                })), 1000);
              case 1:
                return _context2.a(2);
            }
          }, _callee2);
        }));
        return _sendFireworksChatMessage.apply(this, arguments);
      }
      sendButton.addEventListener("click", sendMessage);
      chatInput.addEventListener("keypress", function (e) {
        if (e.key === "Enter" && !e.shiftKey) {
          e.preventDefault();
          sendMessage();
        }
      });
      var sidepanel_toggle = document.getElementById('ai-sidepanel-toggle');
      if (sidepanel_toggle) {
        sidepanel_toggle.addEventListener('click', function () {
          var sidepanel = document.getElementById('ai-sidepanel');
          if (sidepanel.classList.contains('active')) {
            hideDocumentSidepanel();
            sidepanel_toggle.classList.remove('active');
          } else {
            showDocumentSidepanel(['/path/to/document1.pdf']);
            sidepanel_toggle.classList.add('active');
          }
        });
      }
    };

    // Try to initialize immediately if DOM is ready, otherwise wait for DOMContentLoaded
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initializeChat);
    } else {
      // DOM is already loaded, initialize immediately
      initializeChat();
    }
  };
});
//# sourceMappingURL=chat_interface.min.js.map
