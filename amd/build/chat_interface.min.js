function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
define(["exports", "core/ajax"], function (_exports, Ajax) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.init = void 0;
  Ajax = _interopRequireWildcard(Ajax);
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }
  function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i.return) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
  function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o("next", 0), o("throw", 1), o("return", 2)); }, _regeneratorDefine2(e, r, n, t); }
  function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
  function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; } // Standard license block omitted for brevity
  /**
 * @module     block_aiassistant/chat_interface
 * @copyright  2025 Your Name
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
  /**
   * Initialize the AI chat interface
   */
  var init = _exports.init = function init() {
    // Function to initialize the chat interface
    var initializeChat = function initializeChat() {
      console.log('AI Chat: Initializing...');
      var sendButton = document.getElementById("ai-chat-send");
      var chatInput = document.getElementById("ai-chat-input");
      var messagesContainer = document.getElementById("ai-chat-messages");
      var chatContainer = document.getElementById("ai-chat-container");
      var resizeHandle = document.getElementById("ai-resize-handle");
      console.log('AI Chat: Elements found:', {
        sendButton: !!sendButton,
        chatInput: !!chatInput,
        messagesContainer: !!messagesContainer,
        chatContainer: !!chatContainer,
        resizeHandle: !!resizeHandle
      });
      if (!sendButton || !chatInput || !messagesContainer) {
        console.error('AI Chat: Required elements not found');
        return;
      }

      // Load saved dimensions from localStorage
      var savedWidth = localStorage.getItem('ai-chat-width');
      var savedHeight = localStorage.getItem('ai-chat-height');
      if (savedWidth) {
        chatContainer.style.width = savedWidth + 'px';
      }
      if (savedHeight) {
        messagesContainer.style.height = savedHeight + 'px';
      }

      // Resize functionality
      var isResizing = false;
      var startX, startY, startWidth, startHeight;
      resizeHandle.addEventListener('mousedown', function (e) {
        isResizing = true;
        chatContainer.classList.add('resizing');
        startX = e.clientX;
        startY = e.clientY;
        startWidth = parseInt(window.getComputedStyle(chatContainer).width, 10);
        startHeight = parseInt(window.getComputedStyle(messagesContainer).height, 10);
        e.preventDefault();
      });
      document.addEventListener('mousemove', function (e) {
        if (!isResizing) {
          return;
        }
        var newWidth = Math.max(300, Math.min(800, startWidth + (e.clientX - startX)));
        var newHeight = Math.max(150, Math.min(600, startHeight + (e.clientY - startY)));
        chatContainer.style.width = newWidth + 'px';
        messagesContainer.style.height = newHeight + 'px';
        // Save to localStorage
        localStorage.setItem('ai-chat-width', newWidth);
        localStorage.setItem('ai-chat-height', newHeight);
      });
      document.addEventListener('mouseup', function () {
        if (isResizing) {
          isResizing = false;
          chatContainer.classList.remove('resizing');
        }
      });

      /**
       * Send a message to the AI assistant
       */
      function sendMessage() {
        var message = chatInput.value.trim();
        if (!message) {
          return;
        }

        // Add user message
        var userMessageDiv = document.createElement("div");
        userMessageDiv.className = "user-message";
        userMessageDiv.innerHTML = "<strong>You:</strong> " + message;
        messagesContainer.appendChild(userMessageDiv);

        // Clear input
        chatInput.value = "";

        // Show loading state
        var loadingDiv = document.createElement("div");
        loadingDiv.className = "ai-message";
        loadingDiv.innerHTML = "<strong>AI Assistant:</strong> <em>Getting your credentials...</em>";
        messagesContainer.appendChild(loadingDiv);

        // Get user credentials via AJAX
        Ajax.call([{
          methodname: 'block_aiassistant_get_user_credentials',
          args: {},
          done: function done(credentials) {
            // Remove loading message
            messagesContainer.removeChild(loadingDiv);
            if (credentials.success) {
              // Now make the actual chat request using those credentials
              sendChatMessage(message, credentials.api_key);
            } else {
              var errorDiv = document.createElement("div");
              errorDiv.className = "ai-message";
              errorDiv.innerHTML = "<strong>AI Assistant:</strong> <em>Error: " + credentials.message + "</em>";
              messagesContainer.appendChild(errorDiv);
            }
          },
          fail: function fail(error) {
            // Remove loading message
            messagesContainer.removeChild(loadingDiv);
            var errorDiv = document.createElement("div");
            errorDiv.className = "ai-message";
            errorDiv.innerHTML = "<strong>AI Assistant:</strong> <em>Failed to get credentials: " + error.message + "</em>";
            messagesContainer.appendChild(errorDiv);
          }
        }]);

        // Scroll to bottom
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
      }

      /**
       * Send chat message to AI API
       * @param {string} message - The message to send
       * @param {string} apiKey - The API key for authentication
       */
      function sendChatMessage(_x, _x2) {
        return _sendChatMessage.apply(this, arguments);
      }
      function _sendChatMessage() {
        _sendChatMessage = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(message, apiKey) {
          return _regenerator().w(function (_context2) {
            while (1) switch (_context2.n) {
              case 0:
                setTimeout(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {
                  var aiMessageDiv, responseSpan, url, options, response, data, content, thinkPatterns, _i, _thinkPatterns, pattern, endIndex, htmlContent, _t;
                  return _regenerator().w(function (_context) {
                    while (1) switch (_context.p = _context.n) {
                      case 0:
                        aiMessageDiv = document.createElement("div");
                        aiMessageDiv.className = "ai-message";
                        aiMessageDiv.innerHTML = "<strong>AI Assistant:</strong> <span class='response-text'>Thinking...</span>";
                        messagesContainer.appendChild(aiMessageDiv);
                        responseSpan = aiMessageDiv.querySelector('.response-text');
                        url = 'https://api.fireworks.ai/inference/v1/chat/completions';
                        options = {
                          method: 'POST',
                          headers: {
                            Authorization: 'Bearer ' + apiKey,
                            'Content-Type': 'application/json'
                          },
                          body: JSON.stringify({
                            "max_tokens": 2000,
                            "prompt_truncate_len": 1500,
                            "temperature": 1,
                            "top_p": 1,
                            "frequency_penalty": 0,
                            "perf_metrics_in_response": false,
                            "presence_penalty": 0,
                            "repetition_penalty": 1,
                            "mirostat_lr": 0.1,
                            "mirostat_target": 1.5,
                            "n": 1,
                            "ignore_eos": false,
                            "response_format": {
                              "type": "text"
                            },
                            "stream": false,
                            "messages": [{
                              "role": "user",
                              "content": message
                            }],
                            "model": "accounts/fireworks/models/qwen3-235b-a22b-thinking-2507"
                          })
                        };
                        _context.p = 1;
                        _context.n = 2;
                        return fetch(url, options);
                      case 2:
                        response = _context.v;
                        _context.n = 3;
                        return response.json();
                      case 3:
                        data = _context.v;
                        // eslint-disable-next-line no-console
                        console.log(data);
                        if (!(data.choices && data.choices[0] && data.choices[0].message)) {
                          _context.n = 7;
                          break;
                        }
                        content = data.choices[0].message.content; // Extract content after thinking tags if they exist
                        thinkPatterns = ['</think>', '</thinking>'];
                        _i = 0, _thinkPatterns = thinkPatterns;
                      case 4:
                        if (!(_i < _thinkPatterns.length)) {
                          _context.n = 6;
                          break;
                        }
                        pattern = _thinkPatterns[_i];
                        endIndex = content.indexOf(pattern);
                        if (!(endIndex !== -1)) {
                          _context.n = 5;
                          break;
                        }
                        content = content.substring(endIndex + pattern.length).trim();
                        return _context.a(3, 6);
                      case 5:
                        _i++;
                        _context.n = 4;
                        break;
                      case 6:
                        // Convert markdown to HTML
                        // eslint-disable-next-line no-undef
                        htmlContent = marked.parse(content);
                        responseSpan.innerHTML = htmlContent;
                        _context.n = 8;
                        break;
                      case 7:
                        responseSpan.textContent = 'Sorry, I could not process your request.';
                      case 8:
                        _context.n = 10;
                        break;
                      case 9:
                        _context.p = 9;
                        _t = _context.v;
                        // eslint-disable-next-line no-console
                        console.error(_t);
                        responseSpan.textContent = 'Sorry, there was an error processing your request.';
                      case 10:
                        // Scroll to bottom
                        messagesContainer.scrollTop = messagesContainer.scrollHeight;
                      case 11:
                        return _context.a(2);
                    }
                  }, _callee, null, [[1, 9]]);
                })), 1000);
              case 1:
                return _context2.a(2);
            }
          }, _callee2);
        }));
        return _sendChatMessage.apply(this, arguments);
      }
      sendButton.addEventListener("click", sendMessage);
      chatInput.addEventListener("keypress", function (e) {
        if (e.key === "Enter" && !e.shiftKey) {
          e.preventDefault();
          sendMessage();
        }
      });
    };

    // Try to initialize immediately if DOM is ready, otherwise wait for DOMContentLoaded
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initializeChat);
    } else {
      // DOM is already loaded, initialize immediately
      initializeChat();
    }
  };
});
//# sourceMappingURL=chat_interface.min.js.map
